/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DMarketPlace {
  export type NFTStatusStruct = {
    seller: AddressLike;
    price: BigNumberish;
    tokenId: BigNumberish;
  };

  export type NFTStatusStructOutput = [
    seller: string,
    price: bigint,
    tokenId: bigint
  ] & { seller: string; price: bigint; tokenId: bigint };
}

export interface DMarketPlaceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getIteams"
      | "sellDNFT"
      | "statusMap"
      | "takeDNFT"
      | "totalItem"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Sell" | "Taken"): EventFragment;

  encodeFunctionData(functionFragment: "getIteams", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sellDNFT",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "statusMap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeDNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "totalItem", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getIteams", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sellDNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "statusMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeDNFT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalItem", data: BytesLike): Result;
}

export namespace SellEvent {
  export type InputTuple = [
    seller: AddressLike,
    status: DMarketPlace.NFTStatusStruct
  ];
  export type OutputTuple = [
    seller: string,
    status: DMarketPlace.NFTStatusStructOutput
  ];
  export interface OutputObject {
    seller: string;
    status: DMarketPlace.NFTStatusStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TakenEvent {
  export type InputTuple = [
    taker: AddressLike,
    status: DMarketPlace.NFTStatusStruct
  ];
  export type OutputTuple = [
    taker: string,
    status: DMarketPlace.NFTStatusStructOutput
  ];
  export interface OutputObject {
    taker: string;
    status: DMarketPlace.NFTStatusStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DMarketPlace extends BaseContract {
  connect(runner?: ContractRunner | null): DMarketPlace;
  waitForDeployment(): Promise<this>;

  interface: DMarketPlaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getIteams: TypedContractMethod<
    [],
    [DMarketPlace.NFTStatusStructOutput[]],
    "view"
  >;

  sellDNFT: TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;

  statusMap: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        seller: string;
        price: bigint;
        tokenId: bigint;
      }
    ],
    "view"
  >;

  takeDNFT: TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;

  totalItem: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getIteams"
  ): TypedContractMethod<[], [DMarketPlace.NFTStatusStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "sellDNFT"
  ): TypedContractMethod<
    [tokenId: BigNumberish, price: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "statusMap"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint] & {
        seller: string;
        price: bigint;
        tokenId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "takeDNFT"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "totalItem"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Sell"
  ): TypedContractEvent<
    SellEvent.InputTuple,
    SellEvent.OutputTuple,
    SellEvent.OutputObject
  >;
  getEvent(
    key: "Taken"
  ): TypedContractEvent<
    TakenEvent.InputTuple,
    TakenEvent.OutputTuple,
    TakenEvent.OutputObject
  >;

  filters: {
    "Sell(address,tuple)": TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;
    Sell: TypedContractEvent<
      SellEvent.InputTuple,
      SellEvent.OutputTuple,
      SellEvent.OutputObject
    >;

    "Taken(address,tuple)": TypedContractEvent<
      TakenEvent.InputTuple,
      TakenEvent.OutputTuple,
      TakenEvent.OutputObject
    >;
    Taken: TypedContractEvent<
      TakenEvent.InputTuple,
      TakenEvent.OutputTuple,
      TakenEvent.OutputObject
    >;
  };
}
